package ca.unb.ktb.application.dao;

import ca.unb.ktb.core.model.User;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

/**
 * JPA Repository interface for defining specific DAO methods not already generated by JPA.
 *
 * @author Brandon Richardson
 * */
public interface UserDAO extends JpaRepository<User, Long> {

    /**
     * Find a user using their email address. If multiple users exist with the same email address, the first record
     * found is returned.
     *
     * @param emailAddress The email address to be used in the query.
     * @return An {@link Optional} user with the given email address. If a user cannot be found with the given email address,
     * an empty optional is returned.
     * */
    Optional<User> findByEmail(final String emailAddress);

    /**
     * Find a user using their username.
     *
     * @param username The username to be used in the query.
     * @return An {@link Optional} user with the given username. If a user cannot be found with the given username, an empty
     * optional is returned.
     * */
    Optional<User> findByUsername(final String username);

    /**
     * Test existence of user using their username.
     *
     * @param username The username to be used in the query.
     * @return True if a user exists with the given username, false otherwise.
     * */
    boolean existsByUsername(final String username);

    /**
     * Test existence of user using their email address.
     *
     * @param email The email to be used in the query.
     * @return True if a user exists with the given email address, false otherwise.
     * */
    boolean existsByEmail(final String email);

    /**
     * Find all users with a given {@link User.Role}.
     *
     * @param role A role.
     * @return Users with a given role.
     * */
    List<User> findAllByRole(final User.Role role);

    /**
     * Find all users that contain the partial username. The search is case-insensitive.
     *
     * @param partialUsername The partial username to search for
     * @return Users that contain the given partial username.
     * */
    @Query(value = "SELECT * FROM users WHERE users.username ILIKE %:partialUsername% OR users.first_name ILIKE %:partialUsername% OR users.last_name ILIKE %:partialUsername%",
            countQuery = "SELECT COUNT(*) FROM users WHERE users.username ILIKE %:partialUsername% OR users.first_name ILIKE %:partialUsername% OR users.last_name ILIKE %:partialUsername%",
            nativeQuery = true)
    List<User> findAllByUsernameOrRealNameLike(@Param("partialUsername") final String partialUsername);
}
