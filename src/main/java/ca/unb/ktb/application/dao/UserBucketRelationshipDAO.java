package ca.unb.ktb.application.dao;

import ca.unb.ktb.core.model.Bucket;
import ca.unb.ktb.core.model.User;
import ca.unb.ktb.core.model.UserBucketRelationship;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.Optional;

/**
 * JPA Repository interface for defining specific DAO methods not already generated by JPA.
 *
 * @author Brandon Richardson
 * */
public interface UserBucketRelationshipDAO extends JpaRepository<UserBucketRelationship, Long> {

    /**
     * Retrieve a list of relationships associated to a given user. Used to retrieve a list of buckets that a user
     * is following.
     *
     * @param follower The user that is following the buckets.
     * @return A {@link List} of relationships associated to the given user.
     * */
    List<UserBucketRelationship> findAllByFollower(final User follower);

    /**
     * Retrieve a list of relationships associated to a given bucket. Used to retrieve a list of users that are following
     * a given bucket.
     *
     * @param following The bucket that is being followed.
     * @return A {@link List} of relationships associated to the given bucket.
     * */
    List<UserBucketRelationship> findAllByFollowing(final Bucket following);

    /**
     * Retrieve a specific user-bucket relationship by user and bucket.
     *
     * @param follower The user that is following the bucket.
     * @param following The bucket that is being followed.
     * @return An {@link Optional} UserBucketRelationship.
     * */
    Optional<UserBucketRelationship> findByFollowerAndFollowing(final User follower, final Bucket following);

    /**
     * Retrieve bucket count for a given user.
     *
     * @param owner The user who's bucket count will be retrieved.
     * @return Bucket count of given user.
     * */
    @Query("SELECT COUNT(owner) FROM Bucket b WHERE b.owner = :owner AND b.isPublic = true")
    int findPublicBucketCount(@Param("owner") User owner);

    /**
     * Retrieve bucket count for a given user.
     *
     * @param owner The user who's bucket count will be retrieved.
     * @return Bucket count of given user.
     * */
    @Query("SELECT COUNT(owner) FROM Bucket b WHERE b.owner = :owner AND b.isPublic = false")
    int findPrivateBucketCount(@Param("owner") User owner);

    /**
     * Retrieve a list of buckets which were recently followed by users who are followed by a given user.
     *
     * Results are sorted by the user_relationship created_at field. As such, the pageable should be unsorted.
     *
     * @param followerId the id of the current user.
     * @param pageable pagination details.
     * @return list of UserBucketRelationships, sorted by their relationship created_at date, for relationships between
     * buckets and the followers of a given user.
     */
    @Query(value = "SELECT ubr.* FROM users_relationships ur " +
            "INNER JOIN users_bucket_relationships ubr ON (ur.following_id = ubr.follower_id) " +
            "WHERE ur.follower_id = :followerId " +
            "ORDER BY ubr.created_at DESC",
            countQuery = "SELECT COUNT(ubr.*) FROM users_relationships ur " +
                    "INNER JOIN users_bucket_relationships ubr ON (ur.following_id = ubr.follower_id) " +
                    "WHERE ur.follower_id = :followerId " +
                    "ORDER BY ubr.created_at DESC",
            nativeQuery = true)
    List<UserBucketRelationship> retrieveBucketsFollowedByFollowedUsers(@Param("followerId") final Long followerId,
                                                                        final Pageable pageable);

    /**
     * Retrieve a list of buckets which were recently followed by a given user.
     *
     * Results are sorted by the user_relationship created_at field. As such, the pageable should be unsorted.
     *
     * @param userId the id of the current user.
     * @param pageable pagination details.
     * @return list of UserBucketRelationships, sorted by their relationship created_at date, for relationships between
     * a given user and buckets they are following.
     */
    @Query(value = "SELECT users_bucket_relationships.* FROM users_bucket_relationships " +
            "WHERE users_bucket_relationships.follower_id = :userId " +
            "ORDER BY users_bucket_relationships.created_at DESC",
            countQuery = "SELECT users_bucket_relationships.* FROM users_bucket_relationships " +
                    "WHERE users_bucket_relationships.follower_id = :userId " +
                    "ORDER BY users_bucket_relationships.created_at DESC",
            nativeQuery = true)
    List<UserBucketRelationship> retrieveBucketsFollowedByUser(@Param("userId") final Long userId,
                                                               final Pageable pageable);
}